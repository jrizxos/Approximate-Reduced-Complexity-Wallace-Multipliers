#include "mul8.h"

uint16_t ARCWM_8x8(uint8_t a, uint8_t b, uint8_t* vars){
    // sum names, taken from the beginning of "/code generation tools/axc_wallace_8x8.vhd"
    enum sum {s1012,s1011,s1010,s1009,s1008,s1007,s1006,s1005,s1004,s1003,
    s1002,s1109,s1108,s1107,s1106,s1105,s2013,s2011,s2010,s2009,s2008,
    s2007,s2006,s2005,s2004,s2003,s2108,s2107,s3012,s3010,s3009,s3008,
    s3007,s3006,s3004,s4005,s0002,s4006,s4007,s4008,s4009,s4010,s4011};

    int par_num = 8;                                                            // partial products number
    int sum_num = 43;                                                           // sums number 43 = 39FA + 4HA

    uint16_t prodA=0, prodB=0;                                                  // outputs

    bitset<32>* partials = (bitset<32>*) malloc(par_num*sizeof(bitset<32>));    // malloc partial products array
    for(int i=0; i<par_num; i++) partials[i] = 0;
    partial_products(a, b, par_num, partials);                                  // generate partial products

    uint8_t* sums = (uint8_t*) malloc(sum_num*sizeof(uint8_t));                 // malloc sums array
    for(int i=0; i<sum_num; i++) sums[i] = 0;

    // do sums, generated by "/code generation tools/cpp_gen.py"
    sums[s1002] = ax_full_adder(partials[0][2], partials[1][1], partials[2][0], vars[0]);
    sums[s1003] = ax_full_adder(partials[0][3], partials[1][2], partials[2][1], vars[1]);
    sums[s1004] = ax_full_adder(partials[0][4], partials[1][3], partials[2][2], vars[2]);
    sums[s1005] = ax_full_adder(partials[0][5], partials[1][4], partials[2][3], vars[3]);
    sums[s1006] = ax_full_adder(partials[0][6], partials[1][5], partials[2][4], vars[4]);
    sums[s1007] = ax_full_adder(partials[0][7], partials[1][6], partials[2][5], vars[5]);
    sums[s1008] = ax_full_adder(partials[1][7], partials[2][6], partials[3][5], vars[6]);
    sums[s1009] = ax_full_adder(partials[2][7], partials[3][6], partials[4][5], vars[7]);
    sums[s1010] = ax_full_adder(partials[3][7], partials[4][6], partials[5][5], vars[8]);
    sums[s1011] = ax_full_adder(partials[4][7], partials[5][6], partials[6][5], vars[9]);
    sums[s1012] = ax_full_adder(partials[5][7], partials[6][6], partials[7][5], vars[10]);
    sums[s1105] = ax_full_adder(partials[3][2], partials[4][1], partials[5][0], vars[11]);
    sums[s1106] = ax_full_adder(partials[3][3], partials[4][2], partials[5][1], vars[12]);
    sums[s1107] = ax_full_adder(partials[3][4], partials[4][3], partials[5][2], vars[13]);
    sums[s1108] = ax_full_adder(partials[4][4], partials[5][3], partials[6][2], vars[14]);
    sums[s1109] = ax_full_adder(partials[5][4], partials[6][3], partials[7][2], vars[15]);
    sums[s2003] = ax_full_adder(sums[s1003]&1, (sums[s1002]&2)>>1, partials[3][0], vars[16]);
    sums[s2004] = ax_full_adder(sums[s1004]&1, (sums[s1003]&2)>>1, partials[3][1], vars[17]);
    sums[s2005] = ax_full_adder(sums[s1005]&1, (sums[s1004]&2)>>1, sums[s1105]&1, vars[18]);
    sums[s2006] = ax_full_adder(sums[s1006]&1, (sums[s1005]&2)>>1, sums[s1106]&1, vars[19]);
    sums[s2007] = ax_full_adder(sums[s1007]&1, (sums[s1006]&2)>>1, sums[s1107]&1, vars[20]);
    sums[s2008] = ax_full_adder(sums[s1008]&1, (sums[s1007]&2)>>1, sums[s1108]&1, vars[21]);
    sums[s2009] = ax_full_adder(sums[s1009]&1, (sums[s1008]&2)>>1, sums[s1109]&1, vars[22]);
    sums[s2010] = ax_full_adder(sums[s1010]&1, (sums[s1009]&2)>>1, partials[6][4], vars[23]);
    sums[s2011] = ax_full_adder(sums[s1011]&1, (sums[s1010]&2)>>1, partials[7][4], vars[24]);
    sums[s2013] = ax_full_adder(partials[6][7], (sums[s1012]&2)>>1, partials[7][6], vars[25]);
    sums[s2107] = ax_full_adder((sums[s1106]&2)>>1, partials[6][1], partials[7][0], vars[26]);
    sums[s2108] = half_adder((sums[s1107]&2)>>1, partials[7][1]);
    sums[s3004] = ax_full_adder(sums[s2004]&1, (sums[s2003]&2)>>1, partials[4][0], vars[27]);
    sums[s3006] = ax_full_adder(sums[s2006]&1, (sums[s2005]&2)>>1, (sums[s1105]&2)>>1, vars[28]);
    sums[s3007] = ax_full_adder(sums[s2007]&1, (sums[s2006]&2)>>1, sums[s2107]&1, vars[29]);
    sums[s3008] = ax_full_adder(sums[s2008]&1, (sums[s2007]&2)>>1, sums[s2108]&1, vars[30]);
    sums[s3009] = ax_full_adder(sums[s2009]&1, (sums[s2008]&2)>>1, (sums[s1108]&2)>>1, vars[31]);
    sums[s3010] = ax_full_adder(sums[s2010]&1, (sums[s2009]&2)>>1, (sums[s1109]&2)>>1, vars[32]);
    sums[s3012] = ax_full_adder(sums[s1012]&1, (sums[s2011]&2)>>1, (sums[s1011]&2)>>1, vars[33]);
    sums[s4005] = ax_full_adder(sums[s2005]&1, (sums[s2004]&2)>>1, (sums[s3004]&2)>>1, vars[34]);
    sums[s4006] = half_adder(sums[s3006]&1, partials[6][0]);
    sums[s4007] = half_adder(sums[s3007]&1, (sums[s3006]&2)>>1);
    sums[s4008] = ax_full_adder(sums[s3008]&1, (sums[s3007]&2)>>1, (sums[s2107]&2)>>1, vars[35]);
    sums[s4009] = ax_full_adder(sums[s3009]&1, (sums[s3008]&2)>>1, (sums[s2108]&2)>>1, vars[36]);
    sums[s4010] = ax_full_adder(sums[s3010]&1, (sums[s3009]&2)>>1, partials[7][3], vars[37]);
    sums[s4011] = ax_full_adder(sums[s2011]&1, (sums[s2010]&2)>>1, (sums[s3010]&2)>>1, vars[38]);
    
    // place final sums in outputs, generated by "/code generation tools/cpp_gen.py"
    prodA |= ((int)partials[0][0]);
    prodA |= ((int)partials[0][1]) << 1;
    prodA |= (sums[s1002]&1) << 2;
    prodA |= (sums[s2003]&1) << 3;
    prodA |= (sums[s3004]&1) << 4;
    prodA |= (sums[s4005]&1) << 5;
    prodA |= (sums[s4006]&1) << 6;
    prodA |= (sums[s4007]&1) << 7;
    prodA |= (sums[s4008]&1) << 8;
    prodA |= (sums[s4009]&1) << 9;
    prodA |= (sums[s4010]&1) << 10;
    prodA |= (sums[s4011]&1) << 11;
    prodA |= (sums[s3012]&1) << 12;
    prodA |= (sums[s2013]&1) << 13;
    prodA |= ((int)partials[7][7]) << 14;
    prodB |= ((int)partials[1][0]) << 1;
    prodB |= (sums[s4005]&2) << 5;
    prodB |= (sums[s4006]&2) << 6;
    prodB |= (sums[s4007]&2) << 7;
    prodB |= (sums[s4008]&2) << 8;
    prodB |= (sums[s4009]&2) << 9;
    prodB |= (sums[s4010]&2) << 10;
    prodB |= (sums[s4011]&2) << 11;
    prodB |= (sums[s3012]&2) << 12;
    prodB |= (sums[s2013]&2) << 13;

    free(partials);                                                             // free allocated memory
    free(sums);
    return prodA + prodB;                                                       // return final addition, this is the result of the approximate mutliplication
}